#+TITLE: My GNU Emacs configuration
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil toc:2 timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

* はじめに

この設定は、[[https://gitlab.com/buildfunthings/emacs-config][buildfunthings/emacs-config]] をベースにしています。

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Kohei Kawasaki")
  (setq user-mail-address "mynameiskawasaq@gmail.com")
#+END_SRC

* 基本的なキーの変更
** C-h をバックスペースにする
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-h" 'delete-backward-char)
#+END_SRC

** Meta+方向で window を移動できるようにする

ただし org-mode を除く。

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-<left>")  'windmove-left)
  (global-set-key (kbd "M-<right>") 'windmove-right)
  (global-set-key (kbd "M-<up>")    'windmove-up)
  (global-set-key (kbd "M-<down>")  'windmove-down)
#+END_SRC

** Mac 固有の設定
*** Command とスペースで入力切替が起こる設定を無効にする

Emacs の設定ではなく、Mac 側の設定を変更する必要がある。

1. システム設定画面からキーボードを選択する。
2. ショートカットのタブを選択する。
3. 「入力ソース」の設定のところに、コマンドキーとスペースキーを組み合わせたショートカットが登録されているので、これを無効にする。

*** Mac OS の Command キーと Option キーの挙動を変更する
Command キーをメタキーに、Optionキーを無効に変更する

#+name: credmp-keys
#+begin_src emacs-lisp
  (setq mac-option-modifier 'none)
  (setq mac-command-modifier 'meta)
  (setq ns-function-modifier 'hyper)
#+end_src

*** yes/no の代わりに y/n で答えられるようにする
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** backslash を正しく入力できるようにする
デフォルトでは \ (バックスラッシュ)を入力すると ¥ (円マーク)が入力されてしまう。
これを正しく入力できるようにするには、下記の手順を行う。

1. 画面右上の 「A」というアイコンをクリックする
2. 「環境設定」を開く
3. 「入力ソース」のタブの中に「 ¥ で入力する文字」という設定項目があるので、これを「\(バックスラッシュ)」に変更する

* パッケージごとの設定
** use-package をインストールする

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'diminish)
(require 'bind-key)
#+END_SRC
** exec-path-from-shell-initialize

シェルの $PATH 環境変数を引き継ぐ。

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell :ensure t)
(exec-path-from-shell-initialize)
#+END_SRC

** ag
使い方とかはここを見る。

事前に homebrew で [[https://github.com/ggreer/the_silver_searcher][ag]] をインストールする必要がある。

#+BEGIN_SRC sh
  brew install the_silver_searcher
#+END_SRC

使い方とかはここを見る。

http://agel.readthedocs.io/en/latest/index.html

#+BEGIN_SRC emacs-lisp
  (use-package ag :ensure t)
#+END_SRC

** wgrep
使い方とかはここを見る。

https://github.com/mhayashi1120/Emacs-wgrep

#+BEGIN_SRC emacs-lisp
  (use-package wgrep :ensure t)
#+END_SRC

** swiper
使い方とかはここを見る。

- https://github.com/abo-abo/swiper
- https://www.youtube.com/watch?v=VvnJQpTFVDc

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :bind
    (("M-x" . counsel-M-x)
     ("M-y" . counsel-yank-pop)
     ("C-s" . swiper)
     ("C-c C-r" . ivy-resume)
     ("C-x C-f" . counsel-find-file)
     ("C-c h f" . counsel-describe-function)
     ("C-c h v" . counsel-describe-variable)
     ("C-c i u" . counsel-unicode-char)
     ("M-i" . counsel-imenu)
     ("C-c g" . counsel-git)
     ("C-c j" . counsel-git-grep)
     ("C-c k" . counsel-ag)
     ("C-c l" . scounsel-locate)
     ("C-x b" . ivy-switch-buffer)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package counsel-projectile
    :ensure t
    :bind
    (("C-c p f" . counsel-projectile-find-file)
     ("C-c p d" . counsel-projectile-find-dir)
     ("C-c p b" . counsel-projectile-switch-to-buffer)
     ("C-c p s s" . counsel-projectile-ag)
     ("C-c p p" . counsel-projectile-switch-project)))
#+END_SRC

*** 使い方のメモ
1. "C-c p s s" でプロジェクトの中のファイルを ag でインクリメントサーチ
2. "C-c C-o"(ivy-occur) で検索結果をバッファで開く
3. "C-x C-q"(vy-wgrep-change-to-wgrep-mode) で、そのバッファを編集する
4. "C-c C-c"(wgrep-finish-edit) で編集を終了
5. "C-x s"(save-file) で変更したバッファをファイルに保存

https://sam217pa.github.io/2016/09/11/nuclear-power-editing-via-ivy-and-ag/

** magit
C-c m で magit-status を実行する。

#+BEGIN_SRC emacs-lisp
  (use-package magit
      :ensure t
      :bind
      (("C-c m" . magit-status)))
#+END_SRC

** markdown-toc
#+BEGIN_SRC emacs-lisp
(use-package markdown-toc :ensure t)
#+END_SRC

** 細々としたモード
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode :ensure t)
(use-package json-mode :ensure t)
(use-package terraform-mode :ensure t)
(use-package markdown-mode :ensure t)
(use-package nginx-mode :ensure t)
(use-package apache-mode :ensure t)
#+END_SRC

** org-babel
#+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (sh . t)
       (ruby . t)))
#+END_SRC

* Look and feel
** カラーテーマ
base16 のテーマを設定する。

- https://github.com/chriskempson/base16
- https://github.com/Defman21/base16-materia-scheme

#+BEGIN_SRC emacs-lisp
(use-package base16-theme
  :ensure t
  :config
  (load-theme 'base16-materia t))
#+END_SRC

** 常に行番号を表示する

#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
#+END_SRC

** バックアップファイルを作るディレクトリを固定する
すべてのファイルのバックアップファイルを .ehist ディレクトリに作る。

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '((".*" . "~/.ehist")))
#+END_SRC

* Links
- [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html][Python Source Code Blocks in Org Mode]]
